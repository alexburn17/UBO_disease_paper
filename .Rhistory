# ubo and chalk CONTINUOUS
UBO_chalk_brood <- ds_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(chalk_type, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(chalkbrood, na.rm=T), # mean
n = length(chalkbrood),
)
# overall mean
mean(ds_long$chalk_binary)
# low mean
mean(ds_long[ds_long$UBO_binary == "low UBeeO",]$chalk_binary)
# high mean
mean(ds_long[ds_long$UBO_binary == "high UBeeO",]$chalk_binary)
# model for binary chalk by ubo score
mod <- glm(data = ds_long, chalk_binary ~ UBO_binary * chalk_type, binomial(link = "logit"))
Anova(mod)
# model for binary chalk by ubo score
mod <- glm(data = ds_long, chalk_binary ~ Percentage_UBO * chalk_type, binomial(link = "logit"))
Anova(mod)
summary(mod)
# plot chalk brood binary
ggplot(ds_long, aes(x=Percentage_UBO, y=chalk_binary, color=as.character(chalk_type))) +
geom_smooth(method="glm", se=FALSE, fullrange=TRUE, size = 2, method.args = list(family=binomial)) +
geom_point(size=4) +
ylab("Chalkbrood Binary") + # y axis label
xlab("Percent UBO Response") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = "none") +
scale_color_manual(values = c("#519E9A", "#9E519F"), name=" ")  # color pallets option = A-H
# Chalkbrood prevalence
# ubo and chalk CONTINUOUS
sum <- ds_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(UBO_binary, chalk_type) %>% # pick variables to group by
summarise(
mean = mean(chalk_binary, na.rm=T), # mean
n = length(chalk_binary),
)
sum
mod <- glm(data = ds_long, chalk_binary ~ UBO_binary * chalk_type, family = binomial(link = "logit"))
Anova(mod)
# plot chalk brood
ggplot(ds_short, aes(x=Percentage_UBO, y=percent_chalk)) +
#geom_point(size=0) +
geom_smooth(method="lm", se=FALSE, fullrange=TRUE, size = 2, color = c("#E77624")) +
geom_point(size=2.8) +
ylab("% frames with chalkbrood") + # y axis label
xlab("Percent UBO Response") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.76, .9))
# model for percentage ubo on frames
mod <- lm(data = ds_short, percent_chalk ~ Percentage_UBO)
Anova(mod)
summary(mod)
# CHALKBROOD CELLS BY UBO SCORE
####################################################################################################
# plot chalk brood
ds_long$uboScore <- ds_long$Percentage_UBO/100
ds_long$logChalk <- log10(ds_long$chalkbrood+1)
bot <- ggplot(ds_long, aes(x=uboScore, y = (chalkbrood),
linetype=as.character(chalk_type), shape = as.character(chalk_type))) +
geom_point(size=6) +
ylab(" ") + # y axis label
xlab(" ") + # x axis label
theme_bw(base_size = 20) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
coord_cartesian(xlim = c(0, .5), ylim = c(0, 50)) +
scale_linetype_manual(values = c(1, 3), name=" ", guide = FALSE) + # color pallets option = A-H
scale_shape_manual(values = c(20, 1), name=" ") +
guides(color = guide_legend(override.aes = list(label = ''))) +
annotate("segment", x = 0, xend = (0.8833005), y = 5.374, yend = 0,
colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
geom_smooth(method="lm", se=F, fullrange=TRUE, size = 2, color = "black")
# calculate average slope
x <- lm(data = ds_long, chalkbrood ~ uboScore)
summary(x)
top <- ggplot(ds_long, aes(x=uboScore, y = (chalkbrood),
linetype=as.character(chalk_type), shape = as.character(chalk_type))) +
geom_point(size=6) +
theme_bw(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
coord_cartesian(xlim = c(0, .5)) +
ylab(" ") + # y axis label
scale_linetype_manual(values = c(1, 3), name=NULL, guide = FALSE) + # color pallets option = A-H
scale_shape_manual(values = c(20, 1), name=NULL) +
guides(color = guide_legend(override.aes = list(label = ''))) +
scale_y_continuous(limits = c(150, 200), breaks = seq(150, 200, by = 25))
top
plt <- plot_grid(top, bot, ncol = 1, rel_heights = c(.30, 1), align = "v")
plot_grid(plt + draw_label("UBeeO Score", x=0.55, y=  0, vjust=-.8, angle= 0, size = 20) +
draw_label("Chalkbrood (cells/colony)", x=  0, y=0.55, vjust= 1.5, angle=90, size = 20))
# calculate average slope
x <- lm(data = ds_long, chalkbrood ~ uboScore)
summary(x)
xdf <- ds_long[ds_long$chalk_type == "White Chalk",]
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="loess", se=F, fullrange=TRUE, size = 2, color = "black")
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="lm", formula= (y ~ exp(x)), se=F, fullrange=TRUE, size = 2, color = "black")
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="lm", formula= (log(y) ~ x), se=F, fullrange=TRUE, size = 2, color = "black")
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="lm", formula= (log(y+1) ~ x), se=F, fullrange=TRUE, size = 2, color = "black")
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="lm", formula= (y ~ -exp(x)), se=F, fullrange=TRUE, size = 2, color = "black")
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="lm", formula= (y ~ exp(x)), se=F, fullrange=TRUE, size = 2, color = "black")
log.fit <- function(dep, ind, yourdata){
#Self-starting ...
y <- yourdata[, dep]
x <- yourdata[, ind]
log.ss <- nls(y ~ SSlogis(x, phi1, phi2, phi3))
#C
C <- summary(log.ss)$coef[1]
#a
A <- exp((summary(log.ss)$coef[2]) * (1/summary(log.ss)$coef[3]))
#k
K <- (1 / summary(log.ss)$coef[3])
plot(y ~ x, main = "Logistic Function", xlab=ind, ylab=dep)
lines(0:max(x), predict(log.ss, data.frame(x=0:max(x))), col="red")
r1 <- sum((x - mean(x))^2)
r2 <- sum(residuals(log.ss)^2)
r_sq <- (r1 - r2) / r1
out <- data.frame(cbind(c(C=C, a=A, k=K, R.value=sqrt(r_sq))))
names(out)[1] <- "Logistic Curve"
return(out)
}
# plot chalk brood
ggplot(ds_short, aes(x=Percentage_UBO, y=percent_chalk)) +
#geom_point(size=0) +
geom_smooth(method="lm", se=FALSE, fullrange=TRUE, size = 2, color = c("#E77624")) +
geom_point(size=2.8) +
ylab("% frames with chalkbrood") + # y axis label
xlab("Percent UBO Response") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.76, .9))
log.fit(dep = "percent_chalk", ind = "Percentage_UBO", yourdata = ds_short)
nls
log.fit(ind = "percent_chalk", dep = "Percentage_UBO", yourdata = ds_short)
log.fit(dep = "percent_chalk", ind = "Percentage_UBO", yourdata = ds_short)
# plot chalk brood
ggplot(ds_short, aes(x=Percentage_UBO, y=percent_chalk)) +
#geom_point(size=0) +
geom_smooth(method="lm", se=FALSE, fullrange=TRUE, size = 2, color = c("#E77624")) +
geom_point(size=2.8) +
ylab("% frames with chalkbrood") + # y axis label
xlab("Percent UBO Response") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.76, .9))
# plot chalk brood binary
ggplot(ds_long, aes(x=Percentage_UBO, y=chalk_binary, color=as.character(chalk_type))) +
geom_smooth(method="glm", se=FALSE, fullrange=TRUE, size = 2, method.args = list(family=binomial)) +
geom_point(size=4) +
ylab("Chalkbrood Binary") + # y axis label
xlab("Percent UBO Response") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = "none") +
scale_color_manual(values = c("#519E9A", "#9E519F"), name=" ")  # color pallets option = A-H
# Chalkbrood prevalence
# ubo and chalk CONTINUOUS
sum <- ds_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(UBO_binary, chalk_type) %>% # pick variables to group by
summarise(
mean = mean(chalk_binary, na.rm=T), # mean
n = length(chalk_binary),
)
sum
mod <- glm(data = ds_long, chalk_binary ~ UBO_binary * chalk_type, family = binomial(link = "logit"))
Anova(mod)
# plot chalk brood
ggplot(ds_short, aes(x=Percentage_UBO, y=percent_chalk)) +
#geom_point(size=0) +
geom_smooth(method="lm", se=FALSE, fullrange=TRUE, size = 2, color = c("#E77624")) +
geom_point(size=2.8) +
ylab("% frames with chalkbrood") + # y axis label
xlab("Percent UBO Response") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.76, .9))
# model for percentage ubo on frames
mod <- lm(data = ds_short, percent_chalk ~ Percentage_UBO)
Anova(mod)
summary(mod)
# CHALKBROOD CELLS BY UBO SCORE
####################################################################################################
# plot chalk brood
ds_long$uboScore <- ds_long$Percentage_UBO/100
ds_long$logChalk <- log10(ds_long$chalkbrood+1)
bot <- ggplot(ds_long, aes(x=uboScore, y = (chalkbrood),
linetype=as.character(chalk_type), shape = as.character(chalk_type))) +
geom_point(size=6) +
ylab(" ") + # y axis label
xlab(" ") + # x axis label
theme_bw(base_size = 20) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
coord_cartesian(xlim = c(0, .5), ylim = c(0, 50)) +
scale_linetype_manual(values = c(1, 3), name=" ", guide = FALSE) + # color pallets option = A-H
scale_shape_manual(values = c(20, 1), name=" ") +
guides(color = guide_legend(override.aes = list(label = ''))) +
annotate("segment", x = 0, xend = (0.8833005), y = 5.374, yend = 0,
colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
geom_smooth(method="lm", se=F, fullrange=TRUE, size = 2, color = "black")
# calculate average slope
x <- lm(data = ds_long, chalkbrood ~ uboScore)
summary(x)
top <- ggplot(ds_long, aes(x=uboScore, y = (chalkbrood),
linetype=as.character(chalk_type), shape = as.character(chalk_type))) +
geom_point(size=6) +
theme_bw(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
coord_cartesian(xlim = c(0, .5)) +
ylab(" ") + # y axis label
scale_linetype_manual(values = c(1, 3), name=NULL, guide = FALSE) + # color pallets option = A-H
scale_shape_manual(values = c(20, 1), name=NULL) +
guides(color = guide_legend(override.aes = list(label = ''))) +
scale_y_continuous(limits = c(150, 200), breaks = seq(150, 200, by = 25))
top
plt <- plot_grid(top, bot, ncol = 1, rel_heights = c(.30, 1), align = "v")
plot_grid(plt + draw_label("UBeeO Score", x=0.55, y=  0, vjust=-.8, angle= 0, size = 20) +
draw_label("Chalkbrood (cells/colony)", x=  0, y=0.55, vjust= 1.5, angle=90, size = 20))
log.fit(dep = "chalkbrood", ind = "uboScore", yourdata = ds_short)
log.fit(dep = "chalkbrood", ind = "uboScore", yourdata = ds_long)
model = nls(chalkbrood ~ SSlogis(uboScore, a, b, c), data = ds_long)
model = nls(chalkbrood ~ SSlogis(uboScore+1, a, b, c), data = ds_long)
model = nls(chalkbrood+1 ~ SSlogis(uboScore+1, a, b, c), data = ds_long)
ds_long$uboScore
ds_long$chalkbrood
y <- ds_long$chalkbrood
x <- ds_long$uboScore
linear_model1 <- lm(y~x, data=sample_data)
linear_model1 <- lm(y~x)
linear_model2 <- lm(y~poly(x,2,raw=TRUE))
linear_model3 <- lm(y~poly(x,3,raw=TRUE))
linear_model4 <- lm(y~poly(x,4,raw=TRUE))
linear_model5 <- lm(y~poly(x,5,raw=TRUE))
summary(linear_model1)$adj.r.squared
summary(linear_model2)$adj.r.squared
summary(linear_model3)$adj.r.squared
summary(linear_model4)$adj.r.squared
summary(linear_model5)$adj.r.squared
# Create best linear model
best_model <- lm(y~poly(x,4,raw=TRUE))
# create a basic scatterplot
plot(sample_data$x, sample_data$y)
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(1, 10, length=10)
# define x-axis values
x_axis <- seq(1, 1, length=10)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
# glm for chalkbrood count data by ubo score and chalk type (poisson)\
ds_long$chalk_type <- factor(ds_long$chalk_type, levels = c("White Chalk", "Black Chalk Spores"))
ds_long$ID <- as.character(ds_long$Test_No)
# define x-axis values
x_axis <- seq(0, 1, length=10)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
# Create best linear model
best_model <- lm(y~poly(x,4,raw=TRUE))
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
out <- predict(best_model, data.frame(x=x_axis))
out
out <- predict(best_model, data.frame(x=x_axis))
infl <- c(FALSE, diff(diff(out)>0)!=0)
infl
points(xl[infl ], out[infl ], col="blue")
points(x_axis[infl ], out[infl ], col="blue")
points(x_axis[infl ], out[infl ], col="red")
# Create best linear model
best_model <- lm(y~poly(x,3,raw=TRUE))
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
out <- predict(best_model, data.frame(x=x_axis))
infl <- c(FALSE, diff(diff(out)>0)!=0)
points(x_axis[infl ], out[infl ], col="red")
# Create best linear model
best_model <- lm(y~poly(x,2,raw=TRUE))
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
out <- predict(best_model, data.frame(x=x_axis))
infl <- c(FALSE, diff(diff(out)>0)!=0)
points(x_axis[infl ], out[infl ], col="red")
# Create best linear model
best_model <- lm(y~poly(x,1,raw=TRUE))
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
out <- predict(best_model, data.frame(x=x_axis))
infl <- c(FALSE, diff(diff(out)>0)!=0)
points(x_axis[infl ], out[infl ], col="red")
# Create best linear model
best_model <- lm(y~poly(x,5,raw=TRUE))
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
out <- predict(best_model, data.frame(x=x_axis))
infl <- c(FALSE, diff(diff(out)>0)!=0)
points(x_axis[infl ], out[infl ], col="red")
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="lm", formula= (y ~ exp(x)), se=F, fullrange=TRUE, size = 2, color = "black")
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="nls", formula=y~SSasympOff(x, a, b, c))
log.fit <- function(dep, ind, yourdata){
#Self-starting ...
y <- yourdata[, dep]
x <- yourdata[, ind]
log.ss <- nls(y ~ SSlogis(x, phi1, phi2, phi3))
#C
C <- summary(log.ss)$coef[1]
#a
A <- exp((summary(log.ss)$coef[2]) * (1/summary(log.ss)$coef[3]))
#k
K <- (1 / summary(log.ss)$coef[3])
plot(y ~ x, main = "Logistic Function", xlab=ind, ylab=dep)
lines(0:max(x), predict(log.ss, data.frame(x=0:max(x))), col="red")
r1 <- sum((x - mean(x))^2)
r2 <- sum(residuals(log.ss)^2)
r_sq <- (r1 - r2) / r1
out <- data.frame(cbind(c(C=C, a=A, k=K, R.value=sqrt(r_sq))))
names(out)[1] <- "Logistic Curve"
return(out)
}
log.fit(dep = "chalkbrood", ind = "uboScore", yourdata = ds_long)
model = nls(chalkbrood+1 ~ SSlogis(uboScore+1, a, b, c), data = ds_long)
y <- ds_long$chalkbrood
x <- ds_long$uboScore
linear_model1 <- lm(y~x)
linear_model2 <- lm(y~poly(x,2,raw=TRUE))
linear_model3 <- lm(y~poly(x,3,raw=TRUE))
linear_model4 <- lm(y~poly(x,4,raw=TRUE))
linear_model5 <- lm(y~poly(x,5,raw=TRUE))
summary(linear_model1)$adj.r.squared
summary(linear_model2)$adj.r.squared
summary(linear_model3)$adj.r.squared
summary(linear_model4)$adj.r.squared
summary(linear_model5)$adj.r.squared
# Create best linear model
best_model <- lm(y~poly(x,5,raw=TRUE))
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
out <- predict(best_model, data.frame(x=x_axis))
infl <- c(FALSE, diff(diff(out)>0)!=0)
points(x_axis[infl ], out[infl ], col="red")
# Create best linear model
best_model <- lm(y~poly(x,2,raw=TRUE))
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
out <- predict(best_model, data.frame(x=x_axis))
infl <- c(FALSE, diff(diff(out)>0)!=0)
points(x_axis[infl ], out[infl ], col="red")
# glm for chalkbrood count data by ubo score and chalk type (poisson)\
ds_long$chalk_type <- factor(ds_long$chalk_type, levels = c("White Chalk", "Black Chalk Spores"))
# Create best linear model
best_model <- lm(y~exp(x,2,raw=TRUE))
# Create best linear model
best_model <- lm(y~exp(x))
# create a basic scatterplot
plot(x, y)
# define x-axis values
x_axis <- seq(0, 1, length=100)
# plot best model
lines(x_axis, predict(best_model, data.frame(x=x_axis)), col='green')
out <- predict(best_model, data.frame(x=x_axis))
infl <- c(FALSE, diff(diff(out)>0)!=0)
points(x_axis[infl ], out[infl ], col="red")
out
plot(out)
citation("car")
citation("lme4")
citation("MULTCOMP")
citation("multcomp")
