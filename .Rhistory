ds_long$chalk_binary <- ifelse(ds_long$chalkbrood > 0, 1, 0)
# short data
ds_short <- ds_long[ds_long$chalk_type == "White Chalk",]
# total chalk
ds$TotalChalk = ds$White_Chalk + ds$Spore_Dark_Chalk
# ubo and chalk binary
UBO_chalk_binary <- ds_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(chalk_type, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(chalk_binary, na.rm=T), # mean
n = length(chalk_binary),
a = sum(chalk_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
# ubo and chalk CONTINUOUS
UBO_chalk_brood <- ds_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(chalk_type, UBO_binary) %>% # pick variables to group by
summarise(
mean = mean(chalkbrood, na.rm=T), # mean
n = length(chalkbrood),
)
# overall mean
mean(ds_long$chalk_binary)
# low mean
mean(ds_long[ds_long$UBO_binary == "low UBeeO",]$chalk_binary)
# high mean
mean(ds_long[ds_long$UBO_binary == "high UBeeO",]$chalk_binary)
# model for binary chalk by ubo score
mod <- glm(data = ds_long, chalk_binary ~ UBO_binary * chalk_type, binomial(link = "logit"))
Anova(mod)
# model for binary chalk by ubo score
mod <- glm(data = ds_long, chalk_binary ~ Percentage_UBO * chalk_type, binomial(link = "logit"))
Anova(mod)
summary(mod)
# plot chalk brood binary
ggplot(ds_long, aes(x=Percentage_UBO, y=chalk_binary, color=as.character(chalk_type))) +
geom_smooth(method="glm", se=FALSE, fullrange=TRUE, size = 2, method.args = list(family=binomial)) +
geom_point(size=4) +
ylab("Chalkbrood Binary") + # y axis label
xlab("Percent UBO Response") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = "none") +
scale_color_manual(values = c("#519E9A", "#9E519F"), name=" ")  # color pallets option = A-H
# Chalkbrood prevalence
# ubo and chalk CONTINUOUS
sum <- ds_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(UBO_binary, chalk_type) %>% # pick variables to group by
summarise(
mean = mean(chalk_binary, na.rm=T), # mean
n = length(chalk_binary),
)
sum
mod <- glm(data = ds_long, chalk_binary ~ UBO_binary * chalk_type, family = binomial(link = "logit"))
Anova(mod)
# plot chalk brood
ggplot(ds_short, aes(x=Percentage_UBO, y=percent_chalk)) +
#geom_point(size=0) +
geom_smooth(method="lm", se=FALSE, fullrange=TRUE, size = 2, color = c("#E77624")) +
geom_point(size=2.8) +
ylab("% frames with chalkbrood") + # y axis label
xlab("Percent UBO Response") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.76, .9))
# model for percentage ubo on frames
mod <- lm(data = ds_short, percent_chalk ~ Percentage_UBO)
Anova(mod)
summary(mod)
# CHALKBROOD CELLS BY UBO SCORE
####################################################################################################
# plot chalk brood
ds_long$uboScore <- ds_long$Percentage_UBO/100
ds_long$logChalk <- log10(ds_long$chalkbrood+1)
bot <- ggplot(ds_long, aes(x=uboScore, y = (chalkbrood),
linetype=as.character(chalk_type), shape = as.character(chalk_type))) +
geom_point(size=6) +
ylab(" ") + # y axis label
xlab(" ") + # x axis label
theme_bw(base_size = 20) + # size of the text and label ticks
theme(legend.position = "none") + # place the legend at the top
coord_cartesian(xlim = c(0, .5), ylim = c(0, 50)) +
scale_linetype_manual(values = c(1, 3), name=" ", guide = FALSE) + # color pallets option = A-H
scale_shape_manual(values = c(20, 1), name=" ") +
guides(color = guide_legend(override.aes = list(label = ''))) +
annotate("segment", x = 0, xend = (0.8833005), y = 5.374, yend = 0,
colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
geom_smooth(method="lm", se=F, fullrange=TRUE, size = 2, color = "black")
# calculate average slope
x <- lm(data = ds_long, chalkbrood ~ uboScore)
summary(x)
top <- ggplot(ds_long, aes(x=uboScore, y = (chalkbrood),
linetype=as.character(chalk_type), shape = as.character(chalk_type))) +
geom_point(size=6) +
theme_bw(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
coord_cartesian(xlim = c(0, .5)) +
ylab(" ") + # y axis label
scale_linetype_manual(values = c(1, 3), name=NULL, guide = FALSE) + # color pallets option = A-H
scale_shape_manual(values = c(20, 1), name=NULL) +
guides(color = guide_legend(override.aes = list(label = ''))) +
scale_y_continuous(limits = c(150, 200), breaks = seq(150, 200, by = 25))
top
plt <- plot_grid(top, bot, ncol = 1, rel_heights = c(.30, 1), align = "v")
plot_grid(plt + draw_label("UBeeO Score", x=0.55, y=  0, vjust=-.8, angle= 0, size = 20) +
draw_label("Chalkbrood (cells/colony)", x=  0, y=0.55, vjust= 1.5, angle=90, size = 20))
# calculate average slope
x <- lm(data = ds_long, chalkbrood ~ uboScore)
summary(x)
xdf <- ds_long[ds_long$chalk_type == "White Chalk",]
ggplot(xdf, aes(x=uboScore, y = logChalk)) +
geom_point(size=6) +
ylab("Chalkbrood (cells/frame)") + # y axis label
xlab("UBeeO Score") + # x axis label
theme_minimal(base_size = 20) + # size of the text and label ticks
theme(legend.position = c(.75, .9)) + # place the legend at the top
coord_cartesian(xlim = c(0, .5)) +
guides(color = guide_legend(override.aes = list(label = ''))) +
#  annotate("segment", x = 0, xend = (229.2726/100), y = 2.239076, yend = 0,
#           colour = "darkturquoise", size = 1.2, linetype=1) +
scale_x_continuous(labels = scales::percent) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
geom_smooth(method="nls", formula=y~SSasympOff(x, a, b, c))
log.fit <- function(dep, ind, yourdata){
#Self-starting ...
y <- yourdata[, dep]
x <- yourdata[, ind]
log.ss <- nls(y ~ SSlogis(x, phi1, phi2, phi3))
#C
C <- summary(log.ss)$coef[1]
#a
A <- exp((summary(log.ss)$coef[2]) * (1/summary(log.ss)$coef[3]))
#k
K <- (1 / summary(log.ss)$coef[3])
plot(y ~ x, main = "Logistic Function", xlab=ind, ylab=dep)
lines(0:max(x), predict(log.ss, data.frame(x=0:max(x))), col="red")
r1 <- sum((x - mean(x))^2)
r2 <- sum(residuals(log.ss)^2)
r_sq <- (r1 - r2) / r1
out <- data.frame(cbind(c(C=C, a=A, k=K, R.value=sqrt(r_sq))))
names(out)[1] <- "Logistic Curve"
return(out)
}
log.fit(dep = "chalkbrood", ind = "uboScore", yourdata = ds_long)
ds_long
ds_long$chalk_type
fit <- chngptm(formula.1=nosema_count~1, formula.2=~assay_score, family="Gamma", data=z,
type="hinge", var.type="bootstrap", weights=NULL)
ds_long
fit1 <- chngptm(formula.1=chalkbrood~1, formula.2=~uboScore, family="poisson", data=ds_long,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit1)
# READ DATA
virus <- read.csv("data/UBO_VirusData_2021.csv", header = TRUE, stringsAsFactors = FALSE)
virus$RPS5..Cq. <- NULL # remove un-needed col
# make long form
virus_long <- gather(virus, virus, virus_load, DWV.ACopies.µl:IAPVCopies.µl, factor_key=TRUE)
# remove "Copies.ul" from virus name
virus_long$virus <- gsub('Copies.µl', '', virus_long$virus)
# ubo scores and binary virus and mites and log load
virus_long$virus_binary <- ifelse(virus_long$virus_load > 0, 1, 0)
virus_long$ubo_binary_june <- ifelse(virus_long$June.UBO > 60, "UBeeO High", "UBeeO Low")
virus_long$ubo_binary_august <- ifelse(virus_long$August.UBO > 60, "UBeeO High", "UBeeO Low")
virus_long$mite_binary_june <-  ifelse(virus_long$June.Mite > 0, 1, 0)
virus_long$mite_binary_august <- ifelse(virus_long$August.Mite > 0, 1, 0)
virus_long$logLoad <- log10(virus_long$virus_load + 1)
virus_long <- virus_long[!is.na(virus_long$ubo_binary_august),]
# grouped boxplot
vld <- ggplot(data = virus_long, aes(x = virus, y = logLoad, fill = ubo_binary_june)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
theme(legend.position = "none") +
labs(x="Virus", y="Log10(load) (copies/ul)", fill = "UBeeO Status:", tag = "B") +
scale_fill_manual(values = c("#5071A0", "#E77624")) +
scale_x_discrete(guide = guide_axis(angle = 45))+
annotate("text", x = c(1:6), y = c(9.6, 8,10,9,8.7,8.4), label = c("ns", "*", "**", "**", "ns", "ns"), size = 6)
vld
# virus binary summary
virusPrevSum <- virus_long %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(virus, ubo_binary_june) %>% # pick variables to group by
dplyr::summarise(
mean = mean(virus_binary, na.rm=T), # mean
n = length(virus_binary),
a = sum(virus_binary, na.rm = T)+1,
b = n - a + 1,
lower = qbeta(.025, shape1 = a, shape2 = b),
upper = qbeta(.975, shape1 = a, shape2 = b),
)
virusPrevSum <- virusPrevSum[complete.cases(virusPrevSum),]
virusPrevSum[virusPrevSum$mean==0,]$lower <- NA
virusPrevSum[virusPrevSum$mean==0,]$upper <- NA
vP <- ggplot(virusPrevSum, aes(x=virus, y=mean, fill=ubo_binary_june)) +
theme_minimal(base_size = 20) +
theme(legend.position = "none") +
labs(x="Virus", y="Virus Prevalence", fill = "UBeeO Status:", tag = "A") +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9)) +
scale_fill_manual(values = c("#5071A0", "#E77624")) +
scale_y_continuous(labels = scales::percent)+
scale_x_discrete(guide = guide_axis(angle = 45)) +
annotate("text", x = c(1:6), y = c(1.06, .9,.98,.88,1.05,1.06), label = c("ns", "ns", "**", "ns", "**", "ns"), size = 6)
vP
# extract legend
leg <- ggplot(virusPrevSum, aes(x=virus, y=mean, fill=ubo_binary_june)) +
theme_minimal(base_size = 20) +
theme(legend.position = "top") +
labs(x="Virus", y="Virus Prevalence", fill = "UBeeO Status:", tag = "A") +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9)) +
scale_fill_manual(values = c("#5071A0", "#E77624")) +
scale_y_continuous(labels = scales::percent)+
scale_x_discrete(guide = guide_axis(angle = 45))
# make data wide
virus_wide <- dplyr::select(virus_long, -virus_binary, -ubo_binary_june, -ubo_binary_august,-mite_binary_june, -virus_load)
virus_wide <- virus_wide %>% pivot_wider(names_from = virus, values_from = logLoad)
virus_wide$ubo_binary_june <- ifelse(virus_wide$June.UBO > 60, "UBeeO +", "UBeeO -")
virus_wide$ubo_binary_august <- ifelse(virus_wide$August.UBO > 60, "UBeeO +", "UBeeO -")
# get legend
grobs <- ggplotGrob(leg)$grobs
legend <- grobs[[which(sapply(grobs, function(x) x$name) == "guide-box")]]
# plot figures
plt <- grid.arrange(vP, vld, ncol=2)
plot_grid(legend, plt, nrow = 2, rel_heights = c(.1, 1))
ggplot(virus_long, aes(x=(June.UBO/100), y=(virus_load+1))) +
geom_point(size=4) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, size = 2, color = "#619B50") +
theme_minimal(base_size = 20) +
theme(legend.position = c(.8,.8)) +
labs(x="UBeeO Score", y="Virus Load (copies/ul)", ) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
facet_wrap(vars(virus)) +
scale_x_continuous(labels = scales::percent, guide = guide_axis(angle = 45))
# split dataframe by virus and run regression on log virus load
splitVirus <- split(virus_long, virus_long$virus)
# VIRUS PREV - UBO BINARY
mod6 <- glm(data = splitVirus$BQCV, virus_binary ~ ubo_binary_june, family = binomial(link = "logit"))
mod7 <- glm(data = splitVirus$DWV.A, virus_binary ~ ubo_binary_june, family = binomial(link = "logit"))
mod8 <- glm(data = splitVirus$DWV.B, virus_binary ~ ubo_binary_june, family = binomial(link = "logit"))
mod9 <- glm(data = splitVirus$IAPV, virus_binary ~ ubo_binary_june, family = binomial(link = "logit"))
mod10 <- glm(data = splitVirus$LSV, virus_binary ~ ubo_binary_june, family = binomial(link = "logit"))
mod11 <- glm(data = splitVirus$SBV, virus_binary ~ ubo_binary_june, family = binomial(link = "logit"))
Anova(mod6)
Anova(mod7)
Anova(mod8)
Anova(mod9)
Anova(mod10)
Anova(mod11)
# VIRUS LOAD - UBO BINARY
mod12 <- glm(data = splitVirus$BQCV, (virus_load+1) ~ ubo_binary_june, family = Gamma(link = "identity"))
mod13 <- glm(data = splitVirus$DWV.A, (virus_load+1) ~ ubo_binary_june, family = Gamma(link = "identity"))
mod14 <- glm(data = splitVirus$DWV.B, (virus_load+1) ~ ubo_binary_june, family = Gamma(link = "identity"))
mod15 <- glm(data = splitVirus$IAPV, (virus_load+1) ~ ubo_binary_june, family = Gamma(link = "identity"))
mod16 <- glm(data = splitVirus$LSV, (virus_load+1) ~ ubo_binary_june, family = Gamma(link = "identity"))
mod17 <- glm(data = splitVirus$SBV, (virus_load+1) ~ ubo_binary_june, family = Gamma(link = "identity"))
Anova(mod12)
Anova(mod13)
Anova(mod14)
Anova(mod15)
Anova(mod16)
Anova(mod17)
# VIRUS LOAD - continuous UBO:
mod <- lm(data = splitVirus$BQCV, logLoad ~ June.UBO)
mod2 <- lm(data = splitVirus$DWV.A, logLoad ~ June.UBO)
mod1 <- lm(data = splitVirus$DWV.B, logLoad ~ June.UBO)
mod3 <- lm(data = splitVirus$IAPV, logLoad~ June.UBO)
mod4 <- lm(data = splitVirus$LSV, logLoad ~ June.UBO)
mod5 <- lm(data = splitVirus$SBV, logLoad ~ June.UBO)
Anova(mod)
Anova(mod2)
Anova(mod1)
Anova(mod3)
Anova(mod4)
Anova(mod5)
# DWV-A, DWV-B, IAPV, LSV
splitVirus$DWV.AlogLoad    #~ June.UBO
# DWV-A, DWV-B, IAPV, LSV
splitVirus$DWV.A$logLoad    #~ June.UBO
splitVirus$DWV.A$virus_load
# DWV-A, DWV-B, IAPV, LSV
splitVirus$DWV.A$June.UBO
splitVirus$DWV.A$virus_load
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
splitVirus$DWV.A$logLoad
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=logLoad~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=logLoad~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-B
fit3 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.B,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit3)
# Point Estimate - THRESHOLD - IAPV
fit4 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$IAPV,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit4)
# Point Estimate - THRESHOLD - LSV
fit5 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$LSV,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit5)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-B
fit3 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$DWV.B,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit3)
# Point Estimate - THRESHOLD - IAPV
fit4 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$IAPV,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit4)
# Point Estimate - THRESHOLD - LSV
fit5 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$LSV,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit5)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$DWV.A,
type="segmented", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-B
fit3 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$DWV.B,
type="segmented", var.type="bootstrap", weights=NULL)
summary(fit3)
# Point Estimate - THRESHOLD - IAPV
fit4 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$IAPV,
type="segmented", var.type="bootstrap", weights=NULL)
summary(fit4)
# Point Estimate - THRESHOLD - LSV
fit5 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="gaussian", data=splitVirus$LSV,
type="segmented", var.type="bootstrap", weights=NULL)
summary(fit5)
# Point Estimate - THRESHOLD - LSV
fit5 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$LSV,
type="segmented", var.type="bootstrap", weights=NULL)
summary(fit5)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="segmented", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="step", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="Gamma", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="quasi", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=logLoad~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
# Point Estimate - THRESHOLD - DWV-B
fit3 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.B,
type="hinge", var.type="bootstrap", weights=NULL)
# Point Estimate - THRESHOLD - IAPV
fit4 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$IAPV,
type="hinge", var.type="bootstrap", weights=NULL)
# Point Estimate - THRESHOLD - LSV
fit5 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$LSV,
type="hinge", var.type="bootstrap", weights=NULL)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, est.method = "fastgrid2")
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, est.method = "smoothapprox")
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="segmented2", var.type="bootstrap", weights=NULL)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="stegmented", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="stegmented", var.type="bootstrap", weights=NULL, est.method ="default", grid.search.max = 20)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = 20)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = 20, ub.quantile = 100)
summary(fit2)
splitVirus$DWV.A$June.UBO
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = 50, ub.quantile = 100)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .2, ub.quantile = .95)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .5, ub.quantile = .95)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .94, ub.quantile = .95)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .4, ub.quantile = .95)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .2, ub.quantile = .95)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .25, ub.quantile = .95)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .5)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-B
fit3 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.B,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .5)
summary(fit3)
# Point Estimate - THRESHOLD - IAPV
fit4 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$IAPV,
type="hinge", var.type="bootstrap", weights=NULL, lb.quantile = .5)
summary(fit4)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="M01", var.type="bootstrap", weights=NULL)
summary(fit2)
# Point Estimate - THRESHOLD - DWV-A
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=splitVirus$DWV.A,
type="hinge", var.type="all", weights=NULL)
splitVirus$DWV.A[splitVirus$DWV.A$June.UBO > 20,]
x <- splitVirus$DWV.A[splitVirus$DWV.A$June.UBO > 20,]
fit2 <- chngptm(formula.1=virus_load~1, formula.2=~June.UBO, family="poisson", data=x,
type="hinge", var.type="bootstrap", weights=NULL)
summary(fit2)
model = list(splitVirus$DWV.A$virus_load~1, 1~1, 1~1)  # three intercept-only segments
fit_mcp = mcp(model, data = splitVirus$DWV.A, par_x = "June.UBO")
x <- splitVirus$DWV.A$June.UBO
fit_mcp = mcp(model, data = splitVirus$DWV.A, par_x = "x")
model = list(y~1, 1~1, 1~1)  # three intercept-only segments
model = list(virus_load~1, 1~1, 1~1)  # three intercept-only segments
fit_mcp = mcp(model, data = splitVirus$DWV.A, par_x = "June.UBO")
install.packages("mcp")
library(mcp)
fit_mcp = mcp(model, data = splitVirus$DWV.A, par_x = "June.UBO")
View(fit_mcp)
summary(fit_mcp)
fit_mcp = mcp::mcp(model, data = splitVirus$DWV.A, par_x = "June.UBO")
summary(fit_mcp)
# Simulate
set.seed(42)  # I always use 42; no fiddling
df = data.frame(
x = 1:100,
y = c(rnorm(30, 2), rnorm(40, 0), rnorm(30, 1))
)
model = list(y~1, 1~1, 1~1)  # three intercept-only segments
fit_mcp = mcp(model, data = df, par_x = "x")
summary(fit_mcp)
model = list(
response ~ 1,  # plateau (int_1)
~ 0 + time,    # joined slope (time_2) at cp_1
~ 1 + time     # disjoined slope (int_3, time_3) at cp_2
)
# Get example data and fit it
ex = mcp_example("demo")
ex
ex$data
fit = mcp(model, data = ex$data)
